<?xml version="1.0" encoding="UTF-8"?>
<project name="name-of-project" default="full-build">
	<!-- By default, we assume all tools to be on the $PATH -->
	<property name="db.username" value="root" />
	<property name="db.password" value="" />

	<property name="pdepend" value="pdepend" />
	<property name="phpcpd" value="phpcpd" />
	<property name="phpcs" value="phpcs" />
	<property name="phpdox" value="phpdox" />
	<property name="phploc" value="phploc" />
	<property name="phpmd" value="phpmd" />
	<property name="phpunit" value="phpunit" />
	<property name="mysql" value="mysql" />

	<!-- Use this when the tools are located as PHARs in ${basedir}/web/web/tests/tools 
		<property name="pdepend" value="${basedir}/web/web/tests/tools/pdepend.phar"/> 
		<property name="phpcpd" value="${basedir}/web/web/tests/tools/phpcpd.phar"/> 
		<property name="phpcs" value="${basedir}/web/tests/tools/phpcs.phar"/> <property 
		name="phpdox" value="${basedir}/web/tests/tools/phpdox.phar"/> <property 
		name="phploc" value="${basedir}/web/tests/tools/phploc.phar"/> <property 
		name="phpmd" value="${basedir}/web/tests/tools/phpmd.phar"/> <property name="phpunit" 
		value="${basedir}/web/tests/tools/phpunit.phar"/> -->

	<!-- Use this when the tools are managed by Composer in ${basedir}/web/vendor/bin 
		<property name="pdepend" value="${basedir}/web/vendor/bin/pdepend"/> <property 
		name="phpcpd" value="${basedir}/web/vendor/bin/phpcpd"/> <property name="phpcs" 
		value="${basedir}/web/vendor/bin/phpcs"/> <property name="phpdox" value="${basedir}/web/vendor/bin/phpdox"/> 
		<property name="phploc" value="${basedir}/web/vendor/bin/phploc"/> <property 
		name="phpmd" value="${basedir}/web/vendor/bin/phpmd"/> <property name="phpunit" 
		value="${basedir}/web/vendor/bin/phpunit"/> -->

	<target name="full-build"
		depends="prepare,database,composer,static-analysis,phpunit,phpdox,-check-failure"
		description="Performs static analysis, runs the tests, and generates project documentation" />

	<target name="full-build-parallel"
		depends="prepare,static-analysis-parallel,phpunit,phpdox,-check-failure"
		description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation" />

	<target name="quick-build" depends="prepare,database,composer,phpunit,-check-failure"
		description="Performs a lint check and runs the tests (without generating code coverage reports)" />

	<target name="static-analysis"
		depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci"
		description="Performs static analysis" />

	<!-- Adjust the threadCount attribute's value to the number of CPUs -->
	<target name="static-analysis-parallel"
		description="Performs static analysis (executing the tools in parallel)">
		<parallel threadCount="2">
			<sequential>
				<antcall target="pdepend" />
				<antcall target="phpmd-ci" />
			</sequential>
			<antcall target="lint" />
			<antcall target="phpcpd-ci" />
			<antcall target="phpcs-ci" />
			<antcall target="phploc-ci" />
		</parallel>
	</target>

	<target name="clean" unless="clean.done" description="Cleanup build artifacts">
		<delete dir="${basedir}/web/tests/api" />
		<delete dir="${basedir}/web/tests/coverage" />
		<delete dir="${basedir}/web/tests/logs" />
		<delete dir="${basedir}/web/tests/pdepend" />
		<delete dir="${basedir}/web/tests/phpdox" />
		<property name="clean.done" value="true" />
	</target>

	<target name="composer" depends="vendordir-check" description="Installing composer dependencies">
		<antcall target="composer-install"/>
		<antcall target="composer-update"/>
	</target>
	<target name="composer-install" unless="vendordir.exists" >
		<exec dir="${basedir}/web" executable="composer" failonerror="true">
			<arg value="install" />
		</exec>
	</target>
	<target name="composer-update" if="vendordir.exists" >
		<exec dir="${basedir}/web" executable="composer" failonerror="true">
			<arg value="update" />
		</exec>
	</target>
	
	<target name="vendordir-check">
		<condition property="vendordir.exists">
			<available file="${basedir}/web/vendor" type="dir" />
		</condition>
	</target>
	
	<target name="database" description="Create Database and privileges">
		<exec executable="${mysql}" input="${basedir}/db/privileges.sql"
			failonerror="true">
			<arg value="--user=${db.username}" />
			<arg value="--password=${db.password}" />
		</exec>
		<exec executable="${mysql}" input="${basedir}/db/tangerine.sql"
			failonerror="true">
			<arg value="--user=${db.username}" />
			<arg value="--password=${db.password}" />
			<arg value="--database=tangerine_testing" />
		</exec>
	</target>

	<target name="alias" description="Create An Apache Alias for this site">
		<exec dir="${basedir}/web/tasks" executable="./alias.sh" failonerror="true"/>
	</target>
	
	<target name="vhost" description="Create An Apache VHost for this site">
		<exec dir="${basedir}/web/tasks" executable="./vhost.sh" failonerror="true"/>
	</target>
	

	<target name="prepare" unless="prepare.done" depends="clean"
		description="Prepare for build">
		<mkdir dir="${basedir}/web/tests/api" />
		<mkdir dir="${basedir}/web/tests/coverage" />
		<mkdir dir="${basedir}/web/tests/logs" />
		<mkdir dir="${basedir}/web/tests/pdepend" />
		<mkdir dir="${basedir}/web/tests/phpdox" />
		<mkdir dir="${basedir}/web/tests/ci" />
		<mkdir dir="${basedir}/web/tests/ci/codeCoverage" />
		<mkdir dir="${basedir}/web/log" />
		<mkdir dir="${basedir}/web/cache" />
		<property name="prepare.done" value="true" />
	</target>

	<target name="lint" unless="lint.done"
		description="Perform syntax check of sourcecode files">
		<apply executable="php" taskname="lint">
			<arg value="-l" />

			<fileset dir="${basedir}/web/application">
				<include name="**/*.php" />
				<modified />
			</fileset>

			<fileset dir="${basedir}/web/library">
				<include name="**/*.php" />
				<modified />
			</fileset>

			<fileset dir="${basedir}/web/public">
				<include name="**/*.php" />
				<modified />
			</fileset>

			<fileset dir="${basedir}/web/tests">
				<include name="**/*.php" />
				<modified />
			</fileset>
		</apply>

		<property name="lint.done" value="true" />
	</target>

	<target name="phploc" unless="phploc.done"
		description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
		<exec executable="${phploc}" taskname="phploc">
			<arg value="--count-tests" />
			<arg path="${basedir}/web/application" />
			<arg path="${basedir}/web/library" />
			<arg path="${basedir}/web/tests" />
		</exec>

		<property name="phploc.done" value="true" />
	</target>

	<target name="phploc-ci" unless="phploc.done" depends="prepare"
		description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${phploc}" taskname="phploc">
			<arg value="--count-tests" />
			<arg value="--log-csv" />
			<arg path="${basedir}/web/tests/logs/phploc.csv" />
			<arg value="--log-xml" />
			<arg path="${basedir}/web/tests/logs/phploc.xml" />
			<arg path="${basedir}/web/application" />
			<arg path="${basedir}/web/library" />
			<arg path="${basedir}/web/tests" />
		</exec>

		<property name="phploc.done" value="true" />
	</target>

	<target name="pdepend" unless="pdepend.done" depends="prepare"
		description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${pdepend}" taskname="pdepend">
			<arg value="--jdepend-xml=${basedir}/web/tests/logs/jdepend.xml" />
			<arg value="--jdepend-chart=${basedir}/web/tests/pdepend/dependencies.svg" />
			<arg
				value="--overview-pyramid=${basedir}/web/tests/pdepend/overview-pyramid.svg" />
			<arg path="${basedir}/web/application" />
			<!-- <arg path="${basedir}/web/library" /> -->
		</exec>

		<property name="pdepend.done" value="true" />
	</target>

	<target name="phpmd" unless="phpmd.done"
		description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${phpmd}" taskname="phpmd">
			<arg path="${basedir}/web/application" />
			<arg path="${basedir}/web/library" />
			<arg value="text" />
			<arg path="${basedir}/web/tests/phpmd.xml" />
		</exec>

		<property name="phpmd.done" value="true" />
	</target>

	<target name="phpmd-ci" unless="phpmd.done" depends="prepare"
		description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${phpmd}" taskname="phpmd">
			<arg path="${basedir}/web/application" />
			<arg path="${basedir}/web/library" />
			<arg value="xml" />
			<arg path="${basedir}/web/tests/phpmd.xml" />
			<arg value="--reportfile" />
			<arg path="${basedir}/web/tests/logs/pmd.xml" />
		</exec>

		<property name="phpmd.done" value="true" />
	</target>

	<target name="phpcs" unless="phpcs.done"
		description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${phpcs}" taskname="phpcs">
			<arg value="--standard=PSR2" />
			<arg value="--extensions=php" />
			<arg value="--ignore=autoload.php" />
			<arg path="${basedir}/web/application" />
			<arg path="${basedir}/web/library" />
			<arg path="${basedir}/web/tests" />
		</exec>

		<property name="phpcs.done" value="true" />
	</target>

	<target name="phpcs-ci" unless="phpcs.done" depends="prepare"
		description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
			<arg value="--report=checkstyle" />
			<arg value="--report-file=${basedir}/web/tests/logs/checkstyle.xml" />
			<arg value="--standard=PSR2" />
			<arg value="--extensions=php" />
			<arg value="--ignore=autoload.php" />
			<arg path="${basedir}/web/application" />
			<arg path="${basedir}/web/library" />
			<arg path="${basedir}/web/tests" />
		</exec>

		<property name="phpcs.done" value="true" />
	</target>

	<target name="phpcpd" unless="phpcpd.done"
		description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${phpcpd}" taskname="phpcpd">
			<arg path="${basedir}/web/application" />
		</exec>

		<property name="phpcpd.done" value="true" />
	</target>

	<target name="phpcpd-ci" unless="phpcpd.done" depends="prepare"
		description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${phpcpd}" taskname="phpcpd">
			<arg value="--log-pmd" />
			<arg path="${basedir}/web/tests/logs/pmd-cpd.xml" />
			<arg path="${basedir}/web/application" />
		</exec>

		<property name="phpcpd.done" value="true" />
	</target>

	<target name="phpunit" unless="phpunit.done" depends="prepare"
		description="Run unit tests with PHPUnit">
		<exec executable="${phpunit}" resultproperty="result.phpunit"
			taskname="phpunit">
			<arg value="--stderr" />
			<arg value="--configuration" />
			<arg path="${basedir}/web/tests/phpunit.xml" />
		</exec>

		<property name="phpunit.done" value="true" />
	</target>

	<target name="phpunit-no-coverage" unless="phpunit.done"
		depends="prepare"
		description="Run unit tests with PHPUnit (without generating code coverage reports)">
		<exec executable="${phpunit}" failonerror="true" taskname="phpunit">
			<arg value="--configuration" />
			<arg path="${basedir}/web/tests/phpunit.xml" />
			<arg value="--no-coverage" />
		</exec>

		<property name="phpunit.done" value="true" />
	</target>

	<target name="phpdox" unless="phpdox.done" depends="phploc-ci,phpcs-ci,phpmd-ci"
		description="Generate project documentation using phpDox">
		<exec executable="${phpdox}" dir="${basedir}/web/tests" taskname="phpdox" />

		<property name="phpdox.done" value="true" />
	</target>

	<target name="-check-failure">
		<fail message="PHPUnit did not finish successfully">
			<condition>
				<not>
					<equals arg1="${result.phpunit}" arg2="0" />
				</not>
			</condition>
		</fail>
	</target>
</project>

